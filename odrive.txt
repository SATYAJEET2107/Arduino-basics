

#include <ODriveArduino.h>
#include <MPU6050.h>
MPU6050 mpu;
unsigned long timer = 0;
float timeStep = 0.01;
float yaw = 0;

// Printing with stream operator
template<class T> inline Print& operator <<(Print &obj,     T arg) {
  obj.print(arg);
  return obj;
}
template<>        inline Print& operator <<(Print &obj, float arg) {
  obj.print(arg, 4);
  return obj;
}
long Timer = 0;
int flag=1;


// ODrive object
ODriveArduino odrive(Serial1);
ODriveArduino odrive1(Serial3);
void setup() {
  // ODrive uses 115200 baud
  Serial1.begin(115200);
  Serial3.begin(115200);
  //  pinMode(2,INPUT_PULLUP);
  //  pinMode(8,OUTPUT);
  //digitalWrite(8,1);
  // Serial to PC
  Serial.begin(115200);
  while (!Serial) ; // wait for Arduino Serial Monitor to open

  Serial.println("ODriveArduino");
  Serial.println("Setting parameters...");
  //attachInterrupt(0,blink,RISING);
  // In this example we set the same parameters to both motors.
  // You can of course set them different if you want.
  // See the documentation or play around in odrivetool to see the available parameters
  for (int axis = 0; axis < 2; ++axis) {
    Serial1 << "w axis" << axis << ".controller.config.vel_limit " << 3000.0f << '\n';
    Serial1 << "w axis" << axis << ".motor.config.current_lim " << 20.0f << '\n';
    // This ends up writing something like "w axis0.motor.config.current_lim 10.0\n"
  }
  for (int axis = 0; axis < 2; ++axis) {
    Serial3 << "w axis" << axis << ".controller.config.vel_limit " << 3000.0f << '\n';
    Serial3 << "w axis" << axis << ".motor.config.current_lim " << 20.0f << '\n';
    // This ends up writing something like "w axis0.motor.config.current_lim 10.0\n"
  }



  //  Serial.println("Ready!");
  //  Serial.println("Send the character '0' or '1' to calibrate respective motor (you must do this before you can command movement)");
  //  Serial.println("Send the character 's' to exectue test move");
  //  Serial.println("Send the character 'b' to read bus voltage");
  //  Serial.println("Send the character 'p' to read motor positions in a 10s loop");
  //  Serial.println("Send the character 'z'to stop");
  // Serial.begin(115200);
  Serial.println("Initialize MPU6050");

  while (!mpu.begin(MPU6050_SCALE_2000DPS, MPU6050_RANGE_2G))
  {
    Serial.println("Could not find a valid MPU6050 sensor, check wiring!");
    delay(500);
  }

  mpu.calibrateGyro(); delay(100);
  mpu.setThreshold(3); delay(100);
  Serial.println("Setup complete");
}


char c;
void loop() {


  timer = millis();
  Vector norm = mpu.readNormalizeGyro();

  yaw = yaw + norm.ZAxis * timeStep;
  Serial.print(" Yaw = ");
  Serial.println(yaw);
  delay((timeStep * 1000) - (millis() - timer));
if(flag==1)
{
  odrive.SetVelocity(0, 0); // 1st motor
odrive.SetVelocity(1, 0); // 2nd motor
//odrive1.SetVelocity(0, 100);
odrive1.SetVelocity(1, 00); // 3rd motor
flag++;
}




  Timer = micros();




  if (yaw > 0)
  {
    odrive.SetVelocity(0, 100);
    odrive.SetVelocity(1, 100);
    odrive1.SetVelocity(1, 100);
    //     odrive1.SetVelocity(0, 100);
    //Serial.println(" one side");
  }
  if (yaw < 0)
  { odrive.SetVelocity(0, -100);
    odrive.SetVelocity(1, -100);
    odrive1.SetVelocity(1, -100);
    Serial.println(" other side");


  }
//      else
//      {
//        odrive.SetVelocity(0, 0);
//        odrive.SetVelocity(1, 0);
//        odrive1.SetVelocity(1, 0);
//      }


}

//digitalWrite(8,1);

//void blink()
//{
//  digitalWrite(8,0);
//}